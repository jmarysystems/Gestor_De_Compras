/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gestor_search;

import java.awt.BorderLayout;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.util.List;
import javax.persistence.Query;
import javax.swing.JPanel;
import jpa.JPAUtil;
import fornecedor.Fornecedor_Home;
import gestor.Gestor_Home;
import gestor_new.Gestor_New;;
import java.util.ArrayList;
import jpa.DAOGenericoJPA;
import print.ControleThread_Print;
import produto_new.BookInfoCategoriaDoProduto;
import utilidades.JOPM;
import vizualizar_impressao.Imprimir_Home;

/**
 *
 * @author AnaMariana
 */
public class Menu_Pesquisa_Gestor extends javax.swing.JPanel {

    public Gestor_Home Gestor_Home;
    public  int        IDSELECIONADA; 
    public Tabela_Pesquisa_BD_Gestor Tabela_Pesquisa_BD_Gestor;
    
    private Query q = null;
     
    /**
     * Creates new form Cliente
     */
    public Menu_Pesquisa_Gestor( Gestor_Home Gestor_Home2 ) {
        initComponents();
        
        btVisualizarImpressao.setVisible( false );
        btVisualizarImpressao1.setVisible( false );
        
        Gestor_Home = Gestor_Home2;
        
        inicioCBS();
    }
    
    private void inicioCBS(){        
        cbTipoDePesquisa.setBackground( new Color( 255, 255, 255 ) );   
        cbCategoriaDoProduto.setBackground( new Color( 255, 255, 255 ) ); 
        
        setarCategorias( new categoria_do_produto.Categoriadoproduto() );
        
        lbCategoria.setVisible(false);
        cbCategoriaDoProduto.setVisible(false);
    }
    
    public void tabela(Tabela_Pesquisa_BD_Gestor Tabela_Pesquisa_BD_Gestor2){ 
                
        try {                
            Tabela_Pesquisa_BD_Gestor = Tabela_Pesquisa_BD_Gestor2;                                    
        } catch( Exception e ){ e.printStackTrace(); JOPM JOptionPaneMod = new JOPM( 2, "tabela, \n"
                + e.getMessage() + "\n", this.getClass().getSimpleName() ); }     
    }
                
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        cbTipoDePesquisa = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cbCategoriaDoProduto = new javax.swing.JComboBox();
        lbCategoria = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tfPesquisa1 = new javax.swing.JTextField();
        btSelecionar1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        btSelecionar = new javax.swing.JButton();
        tfFornecedor = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btExcluir = new javax.swing.JButton();
        btVisualizar = new javax.swing.JButton();
        btAlterar = new javax.swing.JButton();
        jpStatus1 = new javax.swing.JPanel();
        btAtualizar = new javax.swing.JButton();
        btVisualizarImpressao = new javax.swing.JButton();
        btVisualizarImpressao1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Dados do Gestor de compras");

        jPanel5.setBackground(new java.awt.Color(253, 254, 247));

        jPanel7.setBackground(new java.awt.Color(253, 254, 247));

        cbTipoDePesquisa.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cbTipoDePesquisa.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CÓDIGO DO PRODUTO", "DESCRIÇÃO DO PRODUTO", "CATEGORIA DO PRODUTO" }));
        cbTipoDePesquisa.setSelectedIndex(1);
        cbTipoDePesquisa.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        cbTipoDePesquisa.setPreferredSize(new java.awt.Dimension(212, 23));
        cbTipoDePesquisa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cbTipoDePesquisaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cbTipoDePesquisaMouseExited(evt);
            }
        });
        cbTipoDePesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTipoDePesquisaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Pesquisar por:");

        cbCategoriaDoProduto.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cbCategoriaDoProduto.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        cbCategoriaDoProduto.setPreferredSize(new java.awt.Dimension(212, 23));
        cbCategoriaDoProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                cbCategoriaDoProdutoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cbCategoriaDoProdutoMouseExited(evt);
            }
        });
        cbCategoriaDoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoriaDoProdutoActionPerformed(evt);
            }
        });

        lbCategoria.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lbCategoria.setText("Categoria");

        jPanel1.setBackground(new java.awt.Color(253, 254, 247));

        tfPesquisa1.setPreferredSize(new java.awt.Dimension(399, 24));
        tfPesquisa1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tfPesquisa1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tfPesquisa1MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tfPesquisa1MousePressed(evt);
            }
        });
        tfPesquisa1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfPesquisa1KeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tfPesquisa1, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(tfPesquisa1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        btSelecionar1.setText("Pesquisar");
        btSelecionar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btSelecionar1.setPreferredSize(new java.awt.Dimension(96, 25));
        btSelecionar1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btSelecionar1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSelecionar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbTipoDePesquisa, 0, 233, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbCategoriaDoProduto, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(lbCategoria)
                        .addGap(5, 5, 5)
                        .addComponent(cbCategoriaDoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(5, 5, 5)
                        .addComponent(cbTipoDePesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSelecionar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(253, 254, 247));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Selecione um Fornecedor");

        btSelecionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/selecionar.png"))); // NOI18N
        btSelecionar.setText("Selecionar");
        btSelecionar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btSelecionar.setPreferredSize(new java.awt.Dimension(96, 25));
        btSelecionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btSelecionarMousePressed(evt);
            }
        });

        tfFornecedor.setEditable(false);
        tfFornecedor.setBackground(new java.awt.Color(255, 255, 255));
        tfFornecedor.setPreferredSize(new java.awt.Dimension(399, 24));
        tfFornecedor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tfFornecedorMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tfFornecedorMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tfFornecedorMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(tfFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btSelecionar, tfFornecedor});

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(19, 19, 19))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/exluir.gif"))); // NOI18N
        btExcluir.setText("Excluir");
        btExcluir.setEnabled(false);
        btExcluir.setPreferredSize(new java.awt.Dimension(97, 25));
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        btVisualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/olho.png"))); // NOI18N
        btVisualizar.setText("Visualizar");
        btVisualizar.setEnabled(false);
        btVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVisualizarActionPerformed(evt);
            }
        });

        btAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/alterar.gif"))); // NOI18N
        btAlterar.setText("Alterar");
        btAlterar.setEnabled(false);
        btAlterar.setPreferredSize(new java.awt.Dimension(97, 27));
        btAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlterarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btVisualizar)
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btAlterar, btExcluir, btVisualizar});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(btAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btVisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btAlterar, btVisualizar});

        jpStatus1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(201, 239, 237)));

        btAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/atualizar.png"))); // NOI18N
        btAtualizar.setText("Atualizar");
        btAtualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btAtualizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btAtualizarMousePressed(evt);
            }
        });

        btVisualizarImpressao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/printv2.png"))); // NOI18N
        btVisualizarImpressao.setText("Look");
        btVisualizarImpressao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btVisualizarImpressao.setPreferredSize(new java.awt.Dimension(91, 27));
        btVisualizarImpressao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVisualizarImpressaoActionPerformed(evt);
            }
        });

        btVisualizarImpressao1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utilidades_imagens/printv.png"))); // NOI18N
        btVisualizarImpressao1.setText("Print");
        btVisualizarImpressao1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btVisualizarImpressao1.setPreferredSize(new java.awt.Dimension(91, 27));
        btVisualizarImpressao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVisualizarImpressao1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpStatus1Layout = new javax.swing.GroupLayout(jpStatus1);
        jpStatus1.setLayout(jpStatus1Layout);
        jpStatus1Layout.setHorizontalGroup(
            jpStatus1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpStatus1Layout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addComponent(btVisualizarImpressao1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btVisualizarImpressao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpStatus1Layout.setVerticalGroup(
            jpStatus1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpStatus1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jpStatus1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btAtualizar)
                    .addComponent(btVisualizarImpressao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btVisualizarImpressao1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(jpStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(jpStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        excluir();
    }//GEN-LAST:event_btExcluirActionPerformed

    private void btAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlterarActionPerformed
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
             alterarOuVisualizar( "Alterar" );    
        } catch( Exception e ){      } } }.start();       
    }//GEN-LAST:event_btAlterarActionPerformed

    private void btVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVisualizarActionPerformed
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
             alterarOuVisualizar( "Visualizar" );  
        } catch( Exception e ){      } } }.start(); 
    }//GEN-LAST:event_btVisualizarActionPerformed

    private void tfFornecedorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfFornecedorMousePressed
        selecionarFornecedor();
    }//GEN-LAST:event_tfFornecedorMousePressed

    private void btAtualizarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btAtualizarMousePressed
        try{
                
            Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS", gestor.Gestordecompras.class );
            List<gestor.Gestordecompras>         list00 = q.getResultList();
            
            Tabela_Pesquisa_BD_Gestor.mostrarLista( list00, "btAtualizarMousePressed" );
        } catch( Exception e ){}
    }//GEN-LAST:event_btAtualizarMousePressed

    private void cbTipoDePesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTipoDePesquisaActionPerformed
        try{
            if( cbTipoDePesquisa.getSelectedItem() != null ) {

                if( cbTipoDePesquisa.getSelectedItem().toString().trim().equals("CATEGORIA DO PRODUTO") ){
                    lbCategoria.setVisible(true);
                    cbCategoriaDoProduto.setVisible(true);
                }
                else{
                    lbCategoria.setVisible(false);
                    cbCategoriaDoProduto.setVisible(false);
                }
            }
            pesquisar2();
        }
        catch( Exception e ){}
    }//GEN-LAST:event_cbTipoDePesquisaActionPerformed

    private void cbCategoriaDoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoriaDoProdutoActionPerformed
        pesquisar2();
    }//GEN-LAST:event_cbCategoriaDoProdutoActionPerformed

    private void btSelecionarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btSelecionarMousePressed
        selecionarFornecedor();
    }//GEN-LAST:event_btSelecionarMousePressed

    private void tfPesquisa1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfPesquisa1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPesquisa1MousePressed

    private void tfPesquisa1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPesquisa1KeyReleased
        pesquisar2();
    }//GEN-LAST:event_tfPesquisa1KeyReleased

    private void btSelecionar1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btSelecionar1MousePressed
        pesquisar2();
    }//GEN-LAST:event_btSelecionar1MousePressed

    private void tfFornecedorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfFornecedorMouseEntered
        mouseEntra( tfFornecedor );
    }//GEN-LAST:event_tfFornecedorMouseEntered

    private void tfPesquisa1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfPesquisa1MouseEntered
        mouseEntra( tfPesquisa1 );
    }//GEN-LAST:event_tfPesquisa1MouseEntered

    private void tfFornecedorMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfFornecedorMouseExited
        mouseSai( tfFornecedor );
    }//GEN-LAST:event_tfFornecedorMouseExited

    private void tfPesquisa1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tfPesquisa1MouseExited
        mouseSai( tfPesquisa1 );
    }//GEN-LAST:event_tfPesquisa1MouseExited

    private void cbTipoDePesquisaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbTipoDePesquisaMouseEntered
        mouseEntra( cbTipoDePesquisa );
    }//GEN-LAST:event_cbTipoDePesquisaMouseEntered

    private void cbCategoriaDoProdutoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbCategoriaDoProdutoMouseEntered
        mouseEntra( cbCategoriaDoProduto );
    }//GEN-LAST:event_cbCategoriaDoProdutoMouseEntered

    private void cbTipoDePesquisaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbTipoDePesquisaMouseExited
        mouseSai( cbTipoDePesquisa );
    }//GEN-LAST:event_cbTipoDePesquisaMouseExited

    private void cbCategoriaDoProdutoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cbCategoriaDoProdutoMouseExited
        mouseSai( cbCategoriaDoProduto );
    }//GEN-LAST:event_cbCategoriaDoProdutoMouseExited

    private void btVisualizarImpressaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVisualizarImpressaoActionPerformed
        try{
            if( btVisualizarImpressao.isEnabled() == true ) {

                new Thread() {   @Override public void run() { try { Thread.sleep( 1 );

                    Imprimir_Home Imprimir = new Imprimir_Home( IDSELECIONADA, Gestor_Home.Home, Gestor_Home.tabHome );
                    /*ControleThread_Print t1 = new ControleThread_Print( IDGESTORRECEBIDA );
                    t1.setName("ControleThread_Print");
                    t1.start();*/

                } catch( Exception e ){ JOPM JOPM = new JOPM( 2, "eventoBotaoImprimir(), \n" + e.getMessage() + "\n", this.getClass().getSimpleName() ); } } }.start();

            }
        } catch( Exception e ){ e.printStackTrace(); }
    }//GEN-LAST:event_btVisualizarImpressaoActionPerformed

    private void btVisualizarImpressao1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVisualizarImpressao1ActionPerformed
        try{
            if( btVisualizarImpressao1.isEnabled() == true ) {

                //Imprimir_Home Imprimir = new Imprimir_Home( IDGESTORRECEBIDA, Gestor_Home.Home, Gestor_Home.tabHome );
                new Thread() {   @Override public void run() { try { Thread.sleep( 1 );

                    Query q = null;
                    
                    ControleThread_Print t1 = new ControleThread_Print( IDSELECIONADA, 1, q );
                    t1.setName("ControleThread_Print");
                    t1.start();

                } catch( Exception e ){ JOPM JOPM = new JOPM( 2, "eventoBotaoImprimir(), \n" + e.getMessage() + "\n", this.getClass().getSimpleName() ); } } }.start();

            }
        } catch( Exception e ){ e.printStackTrace(); }
    }//GEN-LAST:event_btVisualizarImpressao1ActionPerformed

    private void pesquisar() {       
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            /*String tf = "";
            if( !tfPesquisa.getText().trim().equals("") ){
                tf = tfPesquisa.getText().trim();
            }*/
            q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID_FORNECEDOR = ?", gestor.Gestordecompras.class );
            q.setParameter(1, getFornecedor().getId() );
            
            tfFornecedor.setText( getFornecedor().getNomeourazaosocial() );
            
            if(q != null) { Tabela_Pesquisa_BD_Gestor.pesquisa(q); }
                                    
        } catch( Exception e ){ /*JOPM JOPM = new JOPM( 2, "pesquisar(), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa" );*/ } } }.start(); 
    }    
    
    private void pesquisar2() {       
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            String tf = "";
            if( !tfPesquisa1.getText().trim().equals("") ){
                tf = tfPesquisa1.getText().trim();
            }
                        
            if( cbTipoDePesquisa.getSelectedItem() != null ) {  
                
                if( tfFornecedor.getText().trim().equals("") ) { 
                    
                    switch (cbTipoDePesquisa.getSelectedItem().toString().trim()) {
                        case "CATEGORIA DO PRODUTO":
                            //MeuObjeto obj = (MeuObjeto) combobox.getSelectedItem();
                            BookInfoCategoriaDoProduto obj = (BookInfoCategoriaDoProduto) cbCategoriaDoProduto.getSelectedItem();
                            //System.out.println( "obj.ID "+obj.ID );
                            q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRASPRODUTOS WHERE ID_CATEGORIADOPRODUTO = ? AND DESCRICAOPRODUTO LIKE ?", gestor.Gestordecomprasprodutos.class );
                            q.setParameter(1, obj.ID );
                            q.setParameter(2, "%"+tf.toUpperCase()+"%");
                            
                            List<gestor.Gestordecomprasprodutos> listB1 = q.getResultList();
                                  
                            ////
                            List<gestor.Gestordecompras> listPP1 = new ArrayList();
                            /// 
                            
                            while ( Tabela_Pesquisa_BD_Gestor.tmPesquisa.getRowCount() > 0){ Tabela_Pesquisa_BD_Gestor.tmPesquisa.removeRow(0); }
                            for (int i = 0; i < listB1.size(); i++){ 
                            
                                Query qX1 = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID = ?", gestor.Gestordecompras.class );
                                qX1.setParameter(1, listB1.get(i).getIdGestordecompras() );                                                               
                                
                                List<gestor.Gestordecompras> listTemp = qX1.getResultList();
                                
                                for (int xc = 0; xc < listTemp.size(); xc++){
                                
                                    //Tabela_Pesquisa_BD_Gestor.mostrarLista2( listTemp.get(xc) );
                                    listPP1.add( listTemp.get(xc) );
                                }
                            }   
                            Tabela_Pesquisa_BD_Gestor.mostrarLista( listPP1,"" );
                            break;
                        case "CÓDIGO DO PRODUTO":
                            q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRASPRODUTOS WHERE CODIGOPRODUTO = ?", gestor.Gestordecomprasprodutos.class );
                            q.setParameter(1, tf.toUpperCase() );
                            
                            List<gestor.Gestordecomprasprodutos> listB2 = q.getResultList();
                            
                            ////
                            List<gestor.Gestordecompras> listPP2 = new ArrayList();
                            /// 
                            
                            while ( Tabela_Pesquisa_BD_Gestor.tmPesquisa.getRowCount() > 0){ Tabela_Pesquisa_BD_Gestor.tmPesquisa.removeRow(0); }
                            for (int i = 0; i < listB2.size(); i++){ 
                                
                                Query qX1 = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID = ?", gestor.Gestordecompras.class );
                                qX1.setParameter(1, listB2.get(i).getIdGestordecompras() );  
                                
                                List<gestor.Gestordecompras> listTemp = qX1.getResultList();
                                
                                for (int xc = 0; xc < listTemp.size(); xc++){
                                    
                                    //Tabela_Pesquisa_BD_Gestor.mostrarLista2( listTemp.get(xc) );
                                    listPP2.add( listTemp.get(xc) );
                                }
                            }
                            Tabela_Pesquisa_BD_Gestor.mostrarLista( listPP2,"" );
                            break;
                        case "DESCRIÇÃO DO PRODUTO":
                            q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRASPRODUTOS WHERE DESCRICAOPRODUTO LIKE ?", gestor.Gestordecomprasprodutos.class );
                            q.setParameter(1, "%"+tf.toUpperCase()+"%");
                            
                            List<gestor.Gestordecomprasprodutos> listB3 = q.getResultList();
                            
                            ////
                            List<gestor.Gestordecompras> listPP3 = new ArrayList();
                            ///                                     
                            
                            while ( Tabela_Pesquisa_BD_Gestor.tmPesquisa.getRowCount() > 0){ Tabela_Pesquisa_BD_Gestor.tmPesquisa.removeRow(0); }
                            for (int i = 0; i < listB3.size(); i++){ 
                            
                                Query qX1 = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID = ?", gestor.Gestordecompras.class );
                                qX1.setParameter(1, listB3.get(i).getIdGestordecompras() );                                                               
                                
                                List<gestor.Gestordecompras> listTemp = qX1.getResultList();
                                
                                for (int xc = 0; xc < listTemp.size(); xc++){
                                
                                    //Tabela_Pesquisa_BD_Gestor.mostrarLista2( listTemp.get(xc) );
                                    listPP3.add( listTemp.get(xc) );
                                }
                            } 
                            Tabela_Pesquisa_BD_Gestor.mostrarLista( listPP3,"" );
                            break;
                    }
                    
                }
                else if( !tfFornecedor.getText().trim().equals("") ) { 
                    
                    switch (cbTipoDePesquisa.getSelectedItem().toString().trim()) {
                        case "CATEGORIA DO PRODUTO":
                            //MeuObjeto obj = (MeuObjeto) combobox.getSelectedItem();
                            BookInfoCategoriaDoProduto obj = (BookInfoCategoriaDoProduto) cbCategoriaDoProduto.getSelectedItem();
                            //System.out.println( "obj.ID "+obj.ID );
                            q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRASPRODUTOS WHERE ID_FORNECEDOR = ? AND ID_CATEGORIADOPRODUTO = ? AND DESCRICAOPRODUTO LIKE ?", gestor.Gestordecomprasprodutos.class );
                            q.setParameter(1, getFornecedor().getId() );
                            q.setParameter(2, obj.ID );
                            q.setParameter(3, "%"+tf.toUpperCase()+"%");
                            
                            List<gestor.Gestordecomprasprodutos> listB1 = q.getResultList();
                                  
                            ////
                            List<gestor.Gestordecompras> listPP1 = new ArrayList();
                            /// 
                            
                            while ( Tabela_Pesquisa_BD_Gestor.tmPesquisa.getRowCount() > 0){ Tabela_Pesquisa_BD_Gestor.tmPesquisa.removeRow(0); }
                            for (int i = 0; i < listB1.size(); i++){ 
                            
                                Query qX1 = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID = ?", gestor.Gestordecompras.class );
                                qX1.setParameter(1, listB1.get(i).getIdGestordecompras() );                                                               
                                
                                List<gestor.Gestordecompras> listTemp = qX1.getResultList();
                                
                                for (int xc = 0; xc < listTemp.size(); xc++){
                                
                                    //Tabela_Pesquisa_BD_Gestor.mostrarLista2( listTemp.get(xc) );
                                    listPP1.add( listTemp.get(xc) );
                                }
                            }   
                            Tabela_Pesquisa_BD_Gestor.mostrarLista( listPP1,"" );
                            break;
                        case "CÓDIGO DO PRODUTO":
                            q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRASPRODUTOS WHERE ID_FORNECEDOR = ? AND CODIGOPRODUTO = ?", gestor.Gestordecomprasprodutos.class );
                            q.setParameter(1, getFornecedor().getId() );
                            q.setParameter(2, tf.toUpperCase() );
                            
                            List<gestor.Gestordecomprasprodutos> listB2 = q.getResultList();
                            
                            ////
                            List<gestor.Gestordecompras> listPP2 = new ArrayList();
                            /// 
                            
                            while ( Tabela_Pesquisa_BD_Gestor.tmPesquisa.getRowCount() > 0){ Tabela_Pesquisa_BD_Gestor.tmPesquisa.removeRow(0); }
                            for (int i = 0; i < listB2.size(); i++){ 
                                
                                Query qX1 = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID = ?", gestor.Gestordecompras.class );
                                qX1.setParameter(1, listB2.get(i).getIdGestordecompras() );  
                                
                                List<gestor.Gestordecompras> listTemp = qX1.getResultList();
                                
                                for (int xc = 0; xc < listTemp.size(); xc++){
                                    
                                    //Tabela_Pesquisa_BD_Gestor.mostrarLista2( listTemp.get(xc) );
                                    listPP2.add( listTemp.get(xc) );
                                }
                            }
                            Tabela_Pesquisa_BD_Gestor.mostrarLista( listPP2,"" );
                            break;
                        case "DESCRIÇÃO DO PRODUTO":
                            q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRASPRODUTOS WHERE ID_FORNECEDOR = ? AND DESCRICAOPRODUTO LIKE ?", gestor.Gestordecomprasprodutos.class );
                            q.setParameter(1, getFornecedor().getId() );
                            q.setParameter(2, "%"+tf.toUpperCase()+"%");
                            
                            List<gestor.Gestordecomprasprodutos> listB3 = q.getResultList();
                            
                            ////
                            List<gestor.Gestordecompras> listPP3 = new ArrayList();
                            ///                                     
                            
                            while ( Tabela_Pesquisa_BD_Gestor.tmPesquisa.getRowCount() > 0){ Tabela_Pesquisa_BD_Gestor.tmPesquisa.removeRow(0); }
                            for (int i = 0; i < listB3.size(); i++){ 
                            
                                Query qX1 = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID = ?", gestor.Gestordecompras.class );
                                qX1.setParameter(1, listB3.get(i).getIdGestordecompras() );                                                               
                                
                                List<gestor.Gestordecompras> listTemp = qX1.getResultList();
                                
                                for (int xc = 0; xc < listTemp.size(); xc++){
                                
                                    //Tabela_Pesquisa_BD_Gestor.mostrarLista2( listTemp.get(xc) );
                                    listPP3.add( listTemp.get(xc) );
                                }
                            } 
                            Tabela_Pesquisa_BD_Gestor.mostrarLista( listPP3,"" );
                            break;
                    }
                    
                }
            }

                                    
        } catch( Exception e ){ /*JOPM JOPM = new JOPM( 2, "pesquisar(), \n"
                + e.getMessage() + "\n", "Menu_Pesquisa" );*/ } } }.start(); 
    }
     
    private void excluir() {  
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            if( btExcluir.isEnabled() ) {
            
                if( IDSELECIONADA > 0 ) {
                                                            
                    /////////////////////////////////////////////////////////////////////////////////////////
                    List<gestor.Gestordecomprasprodutos> listPP1 = new ArrayList();
                    try{
                        
                        Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRASPRODUTOS WHERE ID_GESTORDECOMPRAS  = ?", gestor.Gestordecomprasprodutos.class );
                        q.setParameter(1, IDSELECIONADA );
                        
                        listPP1 = q.getResultList();
                    }catch(Exception e ){} 
                    
                    for (int i = 0; i < listPP1.size(); i++){ 
                        
                        DAOGenericoJPA DAOGenericoJPA2 = new DAOGenericoJPA( listPP1.get(i), JPAUtil.em()); 
                        DAOGenericoJPA2.excluir();                      
                    }
                    /////////////////////////////////////////////////////////////////////////////////////////
                    
                    //////////////////////////////////////////////////////////////////////////////////////////
                    gestor.Gestordecompras Gestordecompras = new gestor.Gestordecompras();
                    
                    Query qx = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID = ?", gestor.Gestordecompras.class );
                    qx.setParameter(1, IDSELECIONADA );   

                    List<gestor.Gestordecompras> list = qx.getResultList();
                    
                    for (int i = 0; i < list.size(); i++){
                        Gestordecompras = list.get(i);
                    } 
                    
                    DAOGenericoJPA DAOGenericoJPA = new DAOGenericoJPA( Gestordecompras, JPAUtil.em()); 
                    DAOGenericoJPA.excluir();
                    //////////////////////////////////////////////////////////////////////////////////////////
 
                    btAlterar   .setEnabled(false);
                    btExcluir   .setEnabled(false);
                    btVisualizar.setEnabled(false);
                                        
                    pesquisar2();
                }
                else{
                    JOPM JOptionPaneMod = new JOPM( 2, "ID SELECIONADA, "
                            + "\nNenhuma matéria selecionada"
                            + "\nSelecione uma matéria"
                            + "\n", "Matéria selecionada" );
                
                    tfFornecedor.requestFocus();
                }
            }
            
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "excluir(), \n"
                + e.getMessage() + "\n", this.getClass().getSimpleName() ); } } }.start(); 
    }
    
    private void alterarOuVisualizar(String str) {
        try {            
            if( btAlterar.isEnabled() ) {            
                if( IDSELECIONADA > 0 ) {
                    
                    gestor.Gestordecompras               Gestordecompras = new gestor.Gestordecompras();
                    List<gestor.Gestordecomprasprodutos> list_Gestordecomprasprodutos;
                        
                    ////////////////////////////
                    Query q2 = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRASPRODUTOS WHERE ID_GESTORDECOMPRAS = ?", gestor.Gestordecomprasprodutos.class );
                    q2.setParameter(1, IDSELECIONADA);   
                    
                    list_Gestordecomprasprodutos = q2.getResultList();
                    
                    ///////////////////////////
                    gestor.Gestordecomprasprodutos X = new gestor.Gestordecomprasprodutos();
                    for (int i = 0; i < list_Gestordecomprasprodutos.size(); i++){
                        
                        X = list_Gestordecomprasprodutos.get(i);
                    }
                    
                    Query qx = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.GESTORDECOMPRAS WHERE ID = ?", gestor.Gestordecompras.class );
                    qx.setParameter(1, X.getIdGestordecompras());   

                    List<gestor.Gestordecompras> list = qx.getResultList();
                    
                    for (int i = 0; i < list.size(); i++){
                        Gestordecompras = list.get(i);
                    }
                    switch (str) {
                        case "Visualizar":
                            {
                                Gestor_New New = new Gestor_New( Gestor_Home, Gestordecompras, list_Gestordecomprasprodutos, IDSELECIONADA );
                                Gestor_Home.Home.ControleTabs.AddTabSemControleNovo( Gestor_Home.tabHome, "Visualizar", "/utilidades_imagens/olho.png", New );
                                New.btSalvar   .setVisible(false);
                                New.btAtualizar.setVisible(false);
                                break;
                            }
                        case "Alterar":
                            {
                                Gestor_New New = new Gestor_New( Gestor_Home, Gestordecompras, list_Gestordecomprasprodutos, IDSELECIONADA );
                                Gestor_Home.Home.ControleTabs.AddTabSemControleNovo( Gestor_Home.tabHome, "Alterar", "/utilidades_imagens/alterar.gif", New );
                                break;
                            }
                    }
                }
                else{
                    JOPM JOptionPaneMod = new JOPM( 2, "ID SELECIONADA, "
                            + "\nNenhum GESTOR selecionado"
                            + "\nSelecione um GESTOR"
                            + "\n", "GESTOR selecionado" );
                
                    tfFornecedor.requestFocus();
                }
            }
            
        } catch( Exception e ){ e.printStackTrace(); JOPM JOptionPaneMod = new JOPM( 2, "alterar(), \n"
                + e.getMessage() + "\n", this.getClass().getSimpleName() ); } //} }.start(); 
    }

    /**
     * @return the Fornecedor
     */
    public fornecedor.Fornecedor getFornecedor() {
        return Fornecedor;
    }

    /**
     * @param Fornecedor the Fornecedor to set
     */
    public void setFornecedor(fornecedor.Fornecedor Fornecedor) {
        this.Fornecedor = Fornecedor;
    }
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btAlterar;
    public javax.swing.JButton btAtualizar;
    public javax.swing.JButton btExcluir;
    public javax.swing.JButton btSelecionar;
    public javax.swing.JButton btSelecionar1;
    public javax.swing.JButton btVisualizar;
    public javax.swing.JButton btVisualizarImpressao;
    public javax.swing.JButton btVisualizarImpressao1;
    public javax.swing.JComboBox cbCategoriaDoProduto;
    public javax.swing.JComboBox cbTipoDePesquisa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jpStatus1;
    private javax.swing.JLabel lbCategoria;
    public javax.swing.JTextField tfFornecedor;
    public javax.swing.JTextField tfPesquisa1;
    // End of variables declaration//GEN-END:variables
        
    Menu_Pesquisa_Gestor Menu_Pesquisa_Gestor;
    private void selecionarFornecedor() {
         
        Menu_Pesquisa_Gestor = this;
        
        new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
            Fornecedor_Home Fornecedor_Home = new Fornecedor_Home( Gestor_Home.Home, Menu_Pesquisa_Gestor );
            JPanel jp = new JPanel();
            jp.setLayout( new BorderLayout() );
            jp.add      ( Fornecedor_Home, BorderLayout.CENTER  );
            
            Gestor_Home.Home.ControleTabs.AddTabSemControleNovo( Gestor_Home.tabHome, "Selecionar Fornecedor", "/utilidades_imagens/icon.png", jp ); 
            
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "addAbaPesquisa(), \n"
                + e.getMessage() + "\n", this.getClass().getSimpleName() ); } } }.start();    
    }
    
    private fornecedor.Fornecedor Fornecedor;
    public void setarNoJPanelFornecedorSelecionado( fornecedor.Fornecedor Fornecedor2 ) {                                                  
        try{

            setFornecedor(Fornecedor2);
            new Thread() {   @Override public void run() { try { Thread.sleep( 1 ); 
            
                pesquisar();
            
            } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "addAbaPesquisa(), \n"
                    + e.getMessage() + "\n", this.getClass().getSimpleName() ); } } }.start();  
            
        } catch( Exception e ){ JOPM JOptionPaneMod = new JOPM( 2, "setarNoJPanelFornecedorSelecionado(), \n"
                + e.getMessage() + "\n", this.getClass().getSimpleName() ); }
    }
    
    public void setarCategorias(categoria_do_produto.Categoriadoproduto Categoriadoproduto){  
        
        try{            
            Query q = JPAUtil.em().createNativeQuery( "SELECT * FROM SCHEMAJMARY.CATEGORIADOPRODUTO", categoria_do_produto.Categoriadoproduto.class );
            List<categoria_do_produto.Categoriadoproduto> list = q.getResultList();
        
            if( cbCategoriaDoProduto.getItemCount() > 0 ) { cbCategoriaDoProduto.removeAllItems(); }           
            
            int select = 0;
            for (int i = 0; i < list.size(); i++){ 
                
                if( list.get(i).getId() == Categoriadoproduto.getId() ) {
                    select = i;
                }
                                                             
                cbCategoriaDoProduto.addItem( new BookInfoCategoriaDoProduto( 
                        list.get(i).getId(), 
                        list.get(i).getNomedacategoriadoproduto()
                )
                );    
            }      
            
            cbCategoriaDoProduto.setSelectedIndex( select );
        }catch(Exception e ){} 
    }
    
    ///////////////////////////////////////////////////////////////////
    private void mouseEntra(javax.swing.JComponent c) {                                                  
        try{
            c.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
            c.setForeground(new java.awt.Color(0, 0, 204));

            c.setBackground(Color.YELLOW);
            c.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true));
        }catch(Exception e ){}
    }
    
    private void mouseSai(javax.swing.JComponent c) {                                                  
        try{
            c.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
            c.setForeground(new java.awt.Color(0, 0, 0));

            c.setBackground(Color.WHITE);
            c.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(201, 239, 237), 1, true));
        }catch(Exception e ){}
    }
    
}
